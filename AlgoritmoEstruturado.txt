ALGORITMO KruskalMelhoradoPorDijkstra;

VAR

I_ARESTAS_ATRIBUIDAS, II_ARESTAS_A_SEREM_ATRIBUIDAS, III_ARESTAS_RESTANTES: lista de arestas
ARESTAS_DO_NO_TRANSFERIDO: lista de arestas
A_NOS_CONECTADOS_PELAS_ARESTAS_DO_CONJUNTO_I, B_NOS_RESTANTES: lista de nós
MENOR_ARESTA_DE_II, ARESTA_CORRESPONDENTE_EM_II: aresta
NO_TRANSFERIDO_PARA_A: nó

INICIO

    I_ARESTAS_ATRIBUIDAS <- VAZIO
    II_ARESTAS_A_SEREM_ATRIBUIDAS <- VAZIO
    III_ARESTAS_RESTANTES <- TODOS AS ARESTAS
    A_NOS_CONECTADOS_PELAS_ARESTAS_DO_CONJUNTO_I <- VAZIO
    B_NOS_RESTANTES <- TODOS OS NÓS
    
    NO_TRANSFERIDO_PARA_A <- B_NOS_RESTANTES[0] // Guardo o primeiro nó de B
    // Transfiro-o para A
    ADICIONAR NO_TRANSFERIDO_PARA_A EM A_NOS_CONECTADOS_PELAS_ARESTAS_DO_CONJUNTO_I
    REMOVER NO_TRANSFERIDO_PARA_A DE B_NOS_RESTANTES // Removo-o de B
    
    PARA TODA ARESTA EM III_ARESTAS_RESTANTES FACA

        SE ARESTA CONTEM NO_TRANSFERIDO_PARA_A ENTAO

            ADICIONAR ARESTA EM II_ARESTAS_A_SEREM_ATRIBUIDAS
            REMOVER ARESTA DE III_ARESTAS_RESTANTES

        FIMSE

    FIMPARA

    ENQUANTO TAMANHO(II_ARESTAS_A_SEREM_ATRIBUIDAS) > 0 OU TAMANHO(B_NOS_RESTANTES) > 0 FACA

        MENOR_ARESTA_DE_II <- OBTER_ARESTA_DE_MENOR_PESO(II_ARESTAS_A_SEREM_ATRIBUIDAS)
        ADICIONAR MENOR_ARESTA_DE_II EM I_ARESTAS_ATRIBUIDAS
        REMOVER MENOR_ARESTA_DE_II DE II_ARESTAS_A_SEREM_ATRIBUIDAS

        PARA TODO NO EM MENOR_ARESTA_DE_II FACA // Percorre os dois nós da aresta

            SE NO != NO_TRANSFERIDO_PARA_A ENTAO // Só entra no nó que ainda está em B

                NO_TRANSFERIDO_PARA_A <- NO // Prepara para transferi-lo para A
                ADICIONAR NO_TRANSFERIDO_PARA_A EM A_NOS_CONECTADOS_PELAS_ARESTAS_DO_CONJUNTO_I
                REMOVER NO_TRANSFERIDO_PARA_A DE B_NOS_RESTANTES

                ARESTAS_DO_NO_TRANSFERIDO <- OBTER_ARESTAS(NO_TRANSFERIDO_PARA_A)

                // Percorre as arestas do nó transferido
                PARA TODA ARESTA EM ARESTAS_DO_NO_TRANSFERIDO FACA

                    PARA CADA B_NO EM B_NOS_RESTANTES FACA // Percorre os nós de B

                        // Checa se a aresta do nó transferido contém um nó de B
                        SE ARESTA CONTEM B_NO ENTAO

                            ARESTA_CORRESPONDENTE_EM_II <- OBTER_CORRESPONDENTE_DO(ARESTA, II_ARESTAS_A_SEREM_ATRIBUIDAS)

                            SE PESO(ARESTA) > PESO(ARESTA_CORRESPONDENTE_EM_II) ENTAO

                                REMOVER ARESTA DE III_ARESTAS_RESTANTES

                            SENAO SE PESO(ARESTA) < PESO(ARESTA_CORRESPONDENTE_EM_II) ENTAO

                                ADICIONAR ARESTA EM II_ARESTAS_A_SEREM_ATRIBUIDAS

                                SE III_ARESTAS_RESTANTES CONTEM ARESTA ENTAO

                                    REMOVER ARESTA DE III_ARESTAS_RESTANTES

                                FIMSE

                                REMOVER ARESTA_CORRESPONDENTE_EM_II DE II_ARESTAS_A_SEREM_ATRIBUIDAS

                            FIMSE

                        FIMSE

                    FIMPARA

                FIMPARA

            FIMSE

        FIMPARA

    FIMENQUANTO

    // As arestas no conjunto I formaram a árvore desejada.

FIMALGORITMO
